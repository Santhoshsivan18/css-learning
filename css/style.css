/* CSS Tutorial Video - https://www.youtube.com/watch?v=GlEY28YLffs */

/* In general, priority order for diff stylesheets are
Inline stylesheet > Internal stylesheet > External stylesheet 
However, specificity and important declarations can alter this order.*/

/* External stylesheet */
/* p {
  color: red;
  font-size: 72px;
} */
/* Anatomy of CSS
   p - selector
   color - property
   red - property value
   color: red; - declaration 
   p { color: red; font-size: 72px; } - Ruleset
*/

/* 
CSS doesn't throw errors but just ignore the errors during execution and execute without the wrong parts and apply only the right parts of CSS

Maybe use online css validation websites like (https://jigsaw.w3.org/css-validator/) to identify errors in html and css files
*/

/* use the website - https://specificity.keegan.st/ for a visual way to understand CSS specificity */

/* universal selector - "*" operator, the properties are applied to every element*/
/* * {
  font-family: "Courier New", Courier, monospace;
  border: 2px solid crimson;
} */
/* body {
  font-size: 24px;
  border: 3px solid black;
} */
/* grouping selectors using "," operator */
/* apply properties to the 2 tags - h1,h2 */
/* h1,
h2 {
  color: green;
} */

/* apply the properties to the span tag inside the p tag */
/* p span {
  background-color: black;
} */
/* alternative of using this is using classes with "." operator */
/* .highlight {
  background-color: black;
}

p {
  color: blue;
} */
/* the last p tag properties gets updated as the properties to be applied to the p tag(the properties get overwritten)*/
/* p {
  color: red;
}

.gray {
  color: gray;
  font-style: italic;
}

#second {
  color: firebrick;
} */

/* the main and body tags are different when applying properties */
/* body {
  font-size: 22px;
  font-family: Georgia, "Times New Roman", Times, serif;
  background-color: yellowgreen;
}
/* use  the website - https://coolors.co/ to choose colors*/
/*p {
  /* color: rgb(100, 0, 100); */
/* color: rgba(112, 112, 238, 1); */
/* color: #249; Hexadecimal code for colors*/
/* color: hsl(300, 100%, 20%); hsl-hue,saturation,lightness*/
/* color: hwb(300 0% 61%); */
/*} */

/* for units and size - https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Values_and_Units */

/* html {
  font-size: 10px;
} */
/* header {
  width: 10%;
} */
/* % percentage values are always related to some other elements */
/* * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

h1 {
  /* font-size: 50px; */ /*
  border: 2px dashed red;
  width: 50%;
  font-size: 3rem;
  padding: 0.5em;
} */

/* main {
  /* font-size: 2rem; */
/* rem - root element * 2(given value) . In this case html is the root element so the font size is 10px*2=20px is the font size of main */ /*
  font-size: 1rem;
  /* width: 50vw; vw - viewport width */
/* background-color: rgb(43, 255, 0); */
/* } */
/* 
body{
  min-height: 100vh; /* vh - viewport height */
/* } */

/* p { */
/* font-size: 2em; */
/* em - parent element * 2(given value) . In this case main is the parent element so the font size is 20px*2=40px is the font size of p */
/* font-size: 1rem; */
/* width: 40ch; */
/* 40ch - after 40 characters in 1 line move to newline */
/* }  */

/* CSS box model - Content, Padding, Border, Margin (CPBM) */
/* using box model we can view and analyze the spaces occupied by the tags in the webpage*/
/* * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
} */
/* .container {
  border: 3px dotted red;
  font-size: 1.5rem; */
/* margin: 0.5em; */
/* margin-top: 1em; */
/* margin-right: 2em;  */
/* for margin and padding */
/* top right bottom left for 4 values */
/* (top,bottom) and (left,right) for 2 values */
/* (top,right,bottom,left) for 1 value*/
/* margin: 1.5em;
  padding: 1.5em; */
/* outline: 5px solid blue;
  outline-offset: -20px; */
/* } */

/* .circle {
  margin: 2em auto;
  background-color: yellow;
  border: 10px solid green;
  border-radius: 40%;
  width: 100px;
  height: 100px;
  outline: 5px dashed black;
  outline-offset: 10px;
} */

/* Typography - arranging texts */
/* body {
  padding: 10%;
  font-size: 1.5rem;
}
input,
button {
  font-size: inherit; */
/* inherits the font-size from body */
/* } */
/* p { */
/* text-indent: 2em; */
/* line-height: 1.5; */
/* letter-spacing: 0.2em; */
/* word-spacing: 1.2em; */
/* font-weight: 600; */
/* font-style: oblique; */
/* font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; */
/* use the website - https://fonts.google.com/ for new fonts */
/* } */

/* Styling Links */
/* body{
  padding: 10%;
  font-size: 1rem;
}
a{
  text-decoration: overline;
  cursor:pointer;
  color: rgb(0, 0, 255);
} */
/* a:visited, a:active, a:hover "visited,active,hover" are pseudo classes*/
/* a:visited{
  color: purple;
}
a:hover , a:focus{
  color: rgb(0, 0, 255);
  opacity: 0.5;
}

a:active{
  color: aqua;
} */

/* Styling lists */
/* body {
  padding: 10%;
  font-size: 1rem;
} */
/* ordered list and unordered list can be represented as the other by modifying the list-style-type property */
/* ol {
  list-style-type: upper-alpha; */
/* list-style-type: none; */
/* } */

/* ul {
  text-align: center;
  list-style-position: inside;
  color: blue; */
/* list-style-image: url(../css/bulletin.png) ; */
/*  for the below line of code, if there's a problem with the image in the url then the square will be displayed for the list */
/* list-style: square url(../css/bulletin.png) inside; */
/* } */
/* use nth child pesudo class with li tag for applying individual css properties to individual point*/
/* ol li:nth-child(2) {
  color: rgb(255, 0, 0);
} */
/* pseudo class - : 
   pseudo elements - ::*/
/* ::marker {
  color: rgb(55, 101, 119);
}
ul li::marker {
  color: yellowgreen;
  font-size: 2em;
  content: "Subscribe >>";
} */

/* *{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
body {
  font-size: 2.5rem;
} */
/* p {
  background-color: gray;
} */

/* .opposite {
  display: inline-block;
  background-color: yellow;
  color: burlywood;
  margin-top: 100px; */
/* this margin-top property can't be applied as there's no space this is the case of inline element when there's no space the property is applied but not visible*/
/* padding: 1rem; */
/* this padding property and margin-top proerty can't be worked correctly here hence display property is used. For display property inline is the default value */
/* } */

/* ul{
  list-style-type: none;
  margin: 0;
  background-color: yellow;
  padding: 1rem;
  text-align: right;
}

li{
  display: inline-block;
  margin-inline: 0.5rem;
}

li a{
  text-decoration: none;
  color: black;
}

li a:hover, li a:focus{
  color: yellow;
  background-color: black;
  text-decoration:underline;
  text-decoration-color: aqua;
} */

/* body{
  font-size: 1.75rem;
  text-align: justify;
}

.block{
  background-color: black;
  color: aliceblue;
  width: 30vw;
  height: 30vw;
  padding: 1rem;
} */
/* using float property */
/* .left{
  float: left;
  margin-right: 10px;
}

.right{
  float: right;
  margin-left: 20px;
} */
/* using clear property for newline */
/* .clear{
  clear: both;
} */
/* when the p tag contains less words the box overflows. Both the p tag and div tag are present inside the section tag internally but this problem persists. This problem occurs irrespective of the clear class to move onto newline. To rectify this problem, overflow property is used in older times. But in recent times, display property is used*/
/* section{
  background-color: yellowgreen;
  border: 2px solid black;
  padding: 1rem;
  overflow: auto;
  display: flow-root;
} */

/* body{
  font-size: 1.5rem;
} */
/* use column property to use column values for tags */
/* .column{ */
/* column-count: 4;
  column-width: 200px; */
/* columns: 4 250px;
  column-rule: 2px solid black;
  column-gap: 3rem;
} */
/* the margin for the 1st and 2nd paragrapgh gets collapsed automatically. This is called margin collapsing where each para takes the common margin when needed */
/* .column p{
  margin-top: 0;
}

.column h2{
  background-color: aqua;
  color: black;
  padding: 3rem;
  margin: 0; */
/* break-inside - this avoids the content in the h2 from breaking for column space, Use this often for good practice*/
/* break-inside: avoid;  */
/* column has more priority and the h2 block gets fixed at the start of column */
/* break-before: column; */
/* } */

/* .column 
.quote{
  margin-top: 1rem;  */
/*  this property is not applied as it has less specificity compared to .column p{margin-top: 0;}. specificity = priority. use the specificity calculator website to check it*/
/* color: red;
  text-align: center;
  font-size: 3rem; */
/* use this column-span property to commonly display the text across all columns using the all value */
/* column-span: all;
} */
/* this white-space property and nowrap values is used when the content should not go to another space but retain in the same original place. In this case all the hyphes(-) are connected to the text after it, when u resize the page the hyphes and the text after it will not split when using this property */
/* .nowrap{
  white-space: nowrap;
} */

/* * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-size: 1.5rem;
  min-height: 200vh;
}

.outer-container {
  border: 3px dashed black;
  width: 75vw;
  height: 85vh;
  margin: 40px auto;
  position: relative;
} */

/* .inner-container{
  border: 2px solid blue;
  width: 40vw;
  height: 50vh;
  margin: 200px auto; */
/* this position property with relative value takes 1st priority as it's the immediate parent and alters it's position relative to it */
/* position: relative; */
/* } */

/* .box{
  width: 150px;
  height: 150px;
  color: white; */
/* border: 2px solid red; */
/* padding: 1rem;
}

.absolute{
  background-color: blue; */
/* for absolute value position there should be a position: relative; defined in the parent class whichever the dev needs the parent to be or else this position property value can't be used */
/* position: absolute;
  top: 0px;
  left: 0px; */
/*   left: -10000px; - this makes the element not visible to the user but it's present at the leftmost position but present in the page */
/* although the fixed property is applied using this z-property we can make it's position as behind the element but fixed in the same position */
/* z-index: 1; */
/* } */

/* .relative{
  background-color: red;
  position: relative;
  top: 100px;
  left: 100px;
} */

/* .fixed{
  background-color: green; */
/* fixed value in position property takes the reference position as the whole page's margin and also it does'nt move out when the user scrolls the pages it's fixed in the same position */
/* position: fixed;
  top: 100px;
  left: 200px;
} */

/* .sticky{
  background-color: black; */
/* the sticky value sticks to the page bottom or top depending on the scroll and it goes away when it's parent element is scrolled away from the page */
/* position: sticky;
  top: 100px;
} */
/* 
html {
  scroll-behavior: smooth;
}
body {
  font-size: 1.5rem;
}
section {
  height: 100vw;
}

.blue {
  background-color: blue;
}
.red {
  background-color: red;
}
.green {
  background-color: green;
}

header,
footer {
  color: whitesmoke;
  text-align: center;
  height: 80px;
  padding: 1rem;
}

header {
  position: sticky;
  top: 0;
  font-size: 4rem;
}

footer {
  position: sticky;
  bottom: 0;
  font-size: 2rem;
  background-color: black;
}

a {
  color: azure;
}

.button {
  background-color: aquamarine;
  font-size: inherit;
  color: blue;
  position: fixed;
  top: 30%;
  left: 0;
  z-index: 1;
}
.button1 {
  background-color: aquamarine;
  font-size: inherit;
  color: blue;
  position: fixed;
  top: 40%;
  left: 0;
  z-index: 1;
} */
/* Flexbox layout */
/* * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  min-height: 100vh;
  padding: 20px;
} */
/* resize the webpage to see the use of flexbox  */
/* .container {
  max-width: 800px;
  min-height: 700px;
  margin-inline: auto;
  border: 2px solid red;
  display: flex;
  justify-content: center;
  gap: 1rem;
  align-items: center; */
/* flex-direction: row;
  flex-wrap: wrap; */
/* flex-flow is an alternate for both flex-direction and flex-wrap */
/* flex-flow: row nowrap;
  align-content: space-evenly;
}

.box { */
/* min-width: 100px; */
/* height: 100px;
  background-color: black;
  color: aliceblue;
  font-size: 2rem;
  padding: 0.5rem; */
/* use these 3 following properties to make the flexbox and it'c ontents as center */
/* display: flex;
  justify-content: center;
  align-items: center;
 */
/* instead of using min-width use flex-basis to set a min-width for items in flexbox */
/* flex-basis: 100px; */
/* using flex-grow makes the items take full space of the container irrespective of the item space in the container. flex-basis is the min-width but when we use flex-grow the element automatically takes up the whole space available in the container */
/* flex-grow: 1; */
/* flex-shrink: 1; */
/* use flex-shrink to shrink the flexbox */
/* flex: 1 1 200px; */
/* flex: flex-grow flex-shrink flex-basis */
/* make sure you use nowrap value to notice the flex-grow flex-shrink flex-basis properties being applied */
/* } */

/* .box:nth-child(2) { */
/* this value 2 in flex-grow/flex-shrink grows more/shrinks more compared to 1 in previous lines */
/* flex-shrink: 2; */
/* flex: 2 2 200px; */
/* control the order of the items using order property */
/* order: 1; */
/* } */

/* Grid layout */
/* * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  min-height: 100vh;
  display: grid;
  grid-template-columns: repeat(9, 1fr);
  grid-auto-rows: 50px auto 50px; */
/* grid-template-areas - use this to name the grid areas individually */
/* grid-template-areas: */
/*    "hd hd hd hd hd hd hd hd hd" /*1st row names*/
/*    "mn mn mn mn mn mn mn sd sd" /*2nd row names*/
/*    "ft ft ft ft ft ft ft ft ft"; /*3rd row names*/
/* } */

/* .el{
  display: grid;
  background-color: brown;
  color: aliceblue;
  place-content: center;
}

.header{
  grid-area: hd;
}

.sidebar{
  grid-area: sd;
}

.footer{
  grid-area: ft;
}

.container {
  grid-area: mn;
  min-height: 400px;
  display: grid; */
/* grid-auto-flow: column; */
/* this grid-template-columns property gives a template for all the column in the grid. fr-fraction unit should be used here for goof practise. */
/* grid-template-columns: 200px 100px;  */
/* grid-template-columns: 2fr 1fr;  */
/* use repeat property inside it to repeat the values. */
/* grid-template-columns: repeat(2, 1fr 2fr); */
/* to generate a pattern use the repeat property as follows */
/* grid-template-columns: repeat(4, 2fr 1fr);  */
/* using it like this the columns are alignes as the 1st column is 200px and the remaining columns as 2fr and 1fr */
/* grid-template-columns: 200px 2fr 1fr; */
/* grid-template-rows: 200px 2fr 1fr; */
/* minmax() function - min:150px max:auto */
/* grid-auto-rows: minmax(150px, auto); */
/* grid-auto-rows: 150px; */
/* grid-auto-columns: 200px; */
/* row-gap: 1em;
  column-gap: 1em; */
/* gap: 1em 2em; row-1em column-2em */
/* gap: 1rem; */
/* } */

/* .box {
  background-color: black;
  color: aliceblue;
  font-size: 2rem;
  padding: 0.5rem;
}

.box:first-child {
  background-color: blue; */
/* grid-row-start: 1;
  grid-row-end: 3; */
/* grid-row: 1 / 3; */
/* grid-column-start: 1;
  grid-column-end: 4; */
/* grid-column: 1 / 4; */

/* display: grid; */
/* align-content: start;
  justify-content: center; */
/* place-content is an alternate for both align-content justify-content */
/* place-content: start center; */
/* } */
/* 
.box:nth-child(2) {
  background-color: blueviolet; */
/* grid-column: 1 / 4;
  grid-row: 3 / 4; */
/* } */

/* Styling images */
/* * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  min-height: 100svh; */
/* background-color: aliceblue;
  background-image: url(../css/bulletin.png),linear-gradient(to left, steelblue,black);
  background-repeat: repeat-y, no-repeat;
  background-position: right; */
/* background-size: 20%, auto;

  background: repeat-y right url(../css/bulletin.png), no-repeat linear-gradient(to left, steelblue,black);
} */

/* by default there will be a slight space b/w the image and the section/container , in which it's present irrespective of the text given with it. This happens cause the default display is as an in-block element. To reslove this a display property is used with the block value */
/* img {
  display: block;
}

.nowrap {
  white-space: nowrap;
}

.offscreen {
  position: absolute;
  left: -10000px;
}

.container{
  background-color: bisque;
  background-image: url(../css/flowers.jpg);
  background-repeat: repeat;
  background-size: cover;
  background-position: center;
}

.hero {
  border-bottom: 2px solid black;
  padding: 20px;
  display: flex;
  place-content: flex-start center;
  gap: 30px;

  background-color: hsla(0, 0%, 0%, 0.274);
}

.h1 {
  font-size: 500%;
  color: white;
  text-shadow: 10px 10px 5px black;
}

.profile-pic {
  width: 35%;
}

.profile-pic img {
  width: 100%;
  height: auto;
  min-height: 100px;
  border: 5px double green;
  border-radius: 50%;
}

.example {
  margin-top: 1rem;
  padding-left: 20px;
  border: 2px solid red;
} */

/* .example img { */
/* if an inline width and height are given with the style tag then in external css also width and height shouls be mentioned */
/* width: 25%;
  height: auto;
}

.clip{
  font-weight: 800;
  font-size: 10rem;
  text-align: center;
  background-image: url(../css/flowers.jpg);
  background-size: 100%;
  background-clip: text;
  color: transparent;
} */

/* Media queries */
/* * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font: 1.5rem;
  min-height: 100svh;
  background-color: bisque; */
/* linear-gradient : color changes in a linear fashion ; radial-gradient : color changes in a radial/circular fashion */
/* background-image: radial-gradient(rgb(255, 140, 0), bisque);
  display: flex;
  flex-direction: column;
}

header,
nav,
main,
footer {
  display: grid;
  place-content: center;
  grid-template-columns: 100%;
  text-align: center;
}

header,
footer {
  background-color: yellowgreen;
  color: white;
  position: sticky;
}

header {
  top: 0;
}

nav {
  background-color: white;
  color: black;
  padding: 0.5rem;
  border-bottom: 2px solid black;
}

main {
  flex-grow: 1;
}

footer {
  bottom: 0;
} */

/* use of media queries : for this particular width - apply this styles and for diff width - apply that styles. The syntax can be defined using the Syntax property */
/* Syntax:
@media media type and (condition:breakpoint){
   CSS rules to be written here 
} */

/* Design the css to be applied to screens from small to big which is good practise and also easy to adapt and change */
/* According to the below condition, apply the css rules/properties when the width of the window/tab starts to go beyond 481px */
/* @media screen and (min-width: 481px) { CSS rules } */
/* According to the below condition, apply the css rules/properties when the orientation of the window/tab goes landscape */
/* @media screen and (orientation: landscape) { CSS rules } */
/* According to the below condition, apply the css rules/properties when the aspect-ratio of the window/tab starts to go for 16:9 */
/* @media screen and (min-aspect-ratio: 16/9) { CSS rules } */

/* If we know the specific breakpoint(in this case width value), then we can use it; If we don't know the breakpoint value then refer the link https://getbootstrap.com/docs/5.0/layout/breakpoints/ */
/* When the width value goes below 576px, the bg color changes from blue to bisque(css in body) and the following css are applied */
/* @media screen and (min-width: 576px) {
  body {
    background-color: blue;
    background-image: radial-gradient(whitesmoke, green);
  }

  nav {
    display: none;
  }
} */
/* When the width value goes below 768px, the bg color changes from red to bisque(css in body) and the following css are applied */
/* @media screen and (min-width: 576px) {
  body {
    background-color: red;
    background-image: radial-gradient(whitesmoke, red);
  }
} */
/* When the width value goes below 992px, the bg color changes from gold to bisque(css in body) and the following css are applied */
/* @media screen and (min-width: 992px) {
  body {
    background-color: gold;
    background-image: radial-gradient(whitesmoke, gold);
  }
} */
/* When the orientation value becomes landscape, the bg color changes from gold to bisque(css in body) and the following css are applied */
/* @media screen and (max-height: 425px) and (min-aspect-ratio: 7/4) {
  body {
    background-color: violet;
    background-image: radial-gradient(whitesmoke, violet);
  }
} */

/* Card Project */
/* * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

img {
  display: block;
  max-width: 100%;
  height: auto;
}

html {
  scroll-behavior: smooth;
}

body {
  display: flex;
  flex-direction: column;
  font: 1.5rem "Nunito", "sans-serif";
  min-height: 100svh;
  background-color: grey;
  background-image: radial-gradient(darkgrey, black);
}

:is(header, footer) {
  position: sticky;
  background-color: rgba(133, 113, 113, 0.295);
  color: white;
  text-align: center;
} */

/* :is(header, footer) - has a specificity of (0, 0, 1) which means when a text color of green is given in header tag in the following the text color changes to green cause header tag css has more priority */
/* :is(header, footer, .card) - has a specificity of (0, 1, 0) which means that the text color of header will not change to white because the specificity of the header selector (0, 0, 1) is higher than that of :is() (0, 1, 0). */
/* The :is() pseudo-class takes a list of selectors and applies the style if any of the selectors match. It also reduces the specificity of the compound selector to the specificity of the most specific argument. */
/* :is(header, footer, .card) {
  position: sticky;
  background-color: rgba(133, 113, 113, 0.295);
  color: white;
  text-align: center;
} */

/* The :where() pseudo-class is similar to :is() but always has a specificity of 0. This means it won’t override other styles with higher specificity. */
/* :where(header, footer, .card) - has a specificity of (0, 0, 0) which means that the text color of header will change to green because the specificity of header (0, 0, 1) is higher than :where() (0, 0, 0), meaning header's style will take precedence. */
/* :where(header, footer, .card) {
  position: sticky;
  background-color: rgba(133, 113, 113, 0.295);
  color: white;
  text-align: center;
} */
/* 
The header selector has a specificity of (0, 0, 1).
The :is(header, footer, .card) selector has a specificity of (0, 1, 0) because it takes the specificity of the most specific argument, which is .card (0, 1, 0).
The :where(header, footer, .card) selector has a specificity of (0, 0, 0), regardless of the arguments. 
*/
/* header {
  top: 0; */
/* color: green; */
/* } */
/* 
footer {
  bottom: 0;
}

nav {
  background-color: white;
  padding: 0.5rem;
  border-bottom: 2px solid black;
  font-weight: bolder;
  display: flex;
  place-content: center;
  gap: 5rem;
} */

/* to apply the css property values to any link in nav tag */
/* nav a:any-link {
  color: rgb(0, 195, 255);
} */

/* nav a:hover,
nav a:focus {
  color: hsla(0, 0%, 20%, 0.6);
} */
/* Combine both the pseudo classes using the pseudo selector ":is" */
/* nav :is(a:hover, a:focus) {
  color: hsla(0, 0%, 20%, 0.6);
}

nav a:active {
  color: red;
}

main {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.5rem;
  padding: 1rem;
}

.card {
  scroll-margin-top: 8rem;
  width: min(100%, 350px);
  background-color: white;
  border: 2px solid black;
  border-radius: 15px;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  align-items: center;
} */

/* Pseudo-Classes: Style elements based on their state (e.g., :hover, :nth-child). */
/* Change color on hover */
/* .nav a:hover {
      color: red;
    } */
/* Style the first link differently */
/* .nav a:first-child {
      font-weight: bold;
    } */
/* Style the second link */
/* .nav a:nth-child(2) {
      text-decoration: underline;
    } */

/* Pseudo-Elements: Style specific parts of elements (e.g., ::before, ::after). */
/* Add content before each link */
/* .nav a::before {
      content: "Link: ";
      font-size: 0.9em;
      color: gray;
    } */
/* Add content after each link */
/* .nav a::after {
      content: " - Click here";
      font-size: 0.8em;
      color: green;
    } */

/* Pseudo-Selectors: General term often used to refer to both pseudo-classes and pseudo-elements (i.e) comination of both pseudo-classes and pseudo-elements.  */
/* Add pseudo-element on hover */
/* .nav a:hover::after {
      content: " (Hovered)";
      color: blue;
    } */
/* 
.card figure {
  display: flex;
  flex-flow: column nowrap;
}

.card:target {
  border: 5px solid blue;
}

.card img {
  border: 5px double #333;
  border-radius: 50%;
}

.card:nth-child(odd) {
  background-color: bisque;
}

.card figcaption::before {
  content: " \2728";
  display: block;
}

.card p::before {
  content: open-quote;
  font-size: 3rem;
}

.card p::after {
  content: close-quote;
  font-size: 3rem;
}

.card figcaption {
  font-weight: bolder;
  font-size: 2rem;
  margin: 1rem;
  text-align: center;
} */
/* .card img[alt] - apply the css properties to all img tag with alt attribute in the card class */
/* BMW img has no alt attribut hence the border property is not applied */
/* .card img[alt]{
  border: 5px solid red;
} */

/* .card img:not[alt] - apply the css properties to all img tag with no alt attribute in the card class */
/* BMW img has no alt attribut hence the border property is applied */
/* .card img:not([alt]) {
  border: 5px solid red;
}

@media screen and (min-width: 576px) {
  main {
    justify-content: center;
    flex-flow: row wrap;
    padding: 1rem;
  }

  .card {
    width: min(100%, 400px);
  }

  .card:last-child {
    order: -1;
  }
}

@media screen and (min-width: 768px) {
  nav {
    display: none;
  }

  .card {
    width: min(100%, 325px);
  }

  .card figure {
    flex-flow: column-reverse;
  }

  .card p {
    margin-top: 1rem;
  }
}

@media screen and (min-width: 992px) {
  .card {
    width: min(100%, 400px);
  }

  .card:nth-child(2) {
    order: -1;
  }
}

@media screen and (min-width: 1200px) {
  .card {
    width: min(33% - 1rem, 500px);
  }
}

@media screen and (max-height: 425px) and (min-aspect-ratio: 7/4) {
  h1 {
    font-size: 1.5rem;
  }

  nav {
    display: none;
  }
} */

/* Variables */
/* :root - pseudo class which sets the variable values to all elements in html  
   use "--" to declare variables 
   captial letter variables are used to declare constant variable values 
   declare unique var names for best practise */
:root {
  /* vars for font */
  --FF: "Nunito", sans-serif;
  /* Functions */
  /* min(),max(),rgb() are functions */
  /* clamp() func - combining both min and max funcs */
  --FS: clamp(1.75rem, 3vh, 2.25rem);
  --FS-SM: clamp(0.75rem, 2vh, 1rem);
  --FS-XL: 3rem;

  /* vars for colors */
  --BGCOLOR: red;
  --ALT-BGCOLOR: blue;
  --RADIAL-COLOR: whitesmoke;
  --TEXT-COLOR: rgb(0, 255, 0);

  /* vars for class square */
  --SQUARE-BGCOLOR: papayawhip;
  --SQUARE-SIZE: max(150px, 20vw);
  --BORDERS: 2px solid black;
  --SHADOWS: 6px 5px -5px black;
}

/* dark mode */
/* @media (prefers-color-scheme: dark) - the css properties are applied if the browser is in dark theme/mode */
/* @media (prefers-color-scheme: light) - the css properties are applied if the browser is in light theme/mode */
/* change the browser themes to view the changes */
/* if this theme based media properties are not given, then the default css properties are applied and if this theme based media properties are given, then the default css properties are overwritten */
@media (prefers-color-scheme: dark) {
  :root {
    --BGCOLOR: black;
    --ALT-BGCOLOR: grey;
    --RADIAL-COLOR: rgb(255, 0, 255);
  }
}
@media (prefers-color-scheme: light) {
  :root {
    --BGCOLOR: rgb(255, 255, 255);
    --ALT-BGCOLOR: rgb(116, 40, 40);
    --RADIAL-COLOR: rgb(0, 0, 0);
  }
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font: var(--FS) var(--FF);
  min-height: 100svh;

  /* background-color: black; */
  /* var() func is used to apply the value of the variable in the respective element */
  background-color: var(--BGCOLOR);
  background-image: radial-gradient(var(--RADIAL-COLOR), var(--BGCOLOR));
  display: flex;
  flex-direction: column;
}

header,
nav,
footer {
  display: grid;
  place-content: center;
  grid-template-columns: 100%;
  text-align: center;
}

header,
footer {
  background-color: var(--ALT-BGCOLOR);
  color: var(--TEXT-COLOR);
  position: sticky;
}

header {
  top: 0;
}

nav {
  background-color: white;
  color: black;
  padding: 0.5rem;
  border-bottom: 2px solid black;
}

/* main {
  flex-grow: 1;
  padding: 10px 0;
  display: flex;
  justify-content: space-evenly;
  align-items: center;
  flex-flow: row wrap;
  gap: min(4vw, 15px);
} */

main{
  flex-grow: 1;
  display: grid;
  grid-template-columns: repeat(4, minmax(100px, 300px));
  gap: min(2vh, 20px);
}

main aside{
  background-color: hsla(0, 0%, 20%, 0.8);
  font-size: var(--FS-SM);
  color: bisque;
  font-style: italic;
  padding: 10px 0;
}

footer {
  bottom: 0;
}

.tooltip{
  border-bottom: 1px dashed white;
  position: relative;
}

.tooltip:hover::before{
  content: attr(data-tooltip);
  position: sticky;
  top: -20px;
  background-color: black;
}

a:any-link{
  color: red;
}

a:hover, a:focus{
  filter: brightness(200%);
}

.square--highlights {
  /* --SQUARE-BGCOLOR, --SQUARE-SIZE var values are overwritten(override) here */
  --SQUARE-BGCOLOR: blue;
  --SQUARE-SIZE: 200px;
}

.square {
  background-color: var(--SQUARE-BGCOLOR);
  width: var(--SQUARE-SIZE);
  height: var(--SQUARE-SIZE);
  border: var(--BORDERS);
  border-radius: 80px;
  display: grid;
  place-content: center;
  font-size: var(--FS);
  box-shadow: var(--SHADOWS);
}

@media screen and (min-width: 570px) {
  main{
    flex-flow: row nowrap;
    justify-content: space-between;
  }

  main section{
    width: calc(70% - 5px);
  }

  main aside{
    width: calc(30% - 5px);
  }
}
